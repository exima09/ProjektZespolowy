<?php

namespace App\Controller\Api;

use App\Entity\News;
use App\Entity\Worker;
use App\Repository\NewsRepository;
use App\Repository\WorkerRepository;
use Doctrine\ORM\EntityManagerInterface;
use JMS\Serializer\SerializationContext;
use JMS\Serializer\SerializerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class NewsController
 * @Route("/api/news")
 * @package App\Controller\Api
 */
class NewsController extends AbstractController
{
    /**
     * @var NewsRepository $newsRepository
     */
    private $newsRepository;
    /**
     * @var WorkerRepository $workerRepository
     */
    private $workerRepository;
    /**
     * @var EntityManagerInterface $entityManager
     */
    private $entityManager;
    /**
     * @var SerializerInterface $serializer
     */
    private $serializer;

    /**
     * NewsController constructor.
     * @param NewsRepository         $newsRepository
     * @param EntityManagerInterface $entityManager
     * @param SerializerInterface    $serializer
     * @param WorkerRepository       $workerRepository
     */
    public function __construct(NewsRepository $newsRepository, EntityManagerInterface $entityManager, SerializerInterface $serializer, WorkerRepository $workerRepository)
    {
        $this->newsRepository = $newsRepository;
        $this->entityManager = $entityManager;
        $this->serializer = $serializer;
        $this->workerRepository = $workerRepository;
    }


    /**
     * @Route(name="news_list", methods={"GET"})
     */
    public function list()
    {
        try {
            return $this->json([
                'news' => $this->serializer->serialize($this->newsRepository->findBy([],['id'=>'DESC']), 'json', SerializationContext::create()->enableMaxDepthChecks()),
            ]);
        } catch (\Exception $exception) {
            return $this->json([
                'message' => "Nie można pobrać aktualności",
                'error' => $exception->getMessage()
            ],400);
        }
    }

    /**
     * @Route(name="news_add", methods={"POST"})
     * @param Request $request
     * @return JsonResponse
     */
    public function add(Request $request)
    {
        try {
            $title =  $request->request->get('title');
            $text =  $request->request->get('text');
            /** @var Worker $worker */
            $worker = $this->getUser()->getWorker();

            /** @var UploadedFile $file */
            $file = $request->files->get('file');

            if (!$file) {
                return new JsonResponse([
                    "message" => "Brak pliku",
                    "error" => "Brak pliku"
                ], 400);
            }
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();

            try {

                $file->move(
                    $this->getParameter('news'),
                    $fileName
                );
            } catch (FileException $e) {
                return new JsonResponse([
                    "message" => "Błąd podczas ładowania pliku",
                    "error" => $e->getMessage()
                ], 400);
            }

            $news = new News($title, $fileName, $text, $worker);
            $this->entityManager->persist($news);
            $this->entityManager->flush();
            return $this->json([
                'message' => "News zostal poprawnie dodany",
            ]);
        } catch (\Exception $exception) {
            return $this->json([
                'message' => "Nie można dodać aktualności",
                'error' => $exception->getMessage()
            ],400);
        }
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
